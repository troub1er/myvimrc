" 让配置变更立即生效
autocmd BufWritePost $MYVIMRC source $MYVIMRC

" 开启文件类型侦测
"filetype on
" 根据侦测到的不同类型加载对应的插件
"filetype plugin on

"nmap vs :vsp
"nmap , <C-W>h
"nmap . <C-W><C-W>

" 显示行号
set nu
set ruler "显示当前的行号列号
set showcmd "在状态栏显示正在输入的命令
set showmode "左下角显示正在输入的命令
set autoindent "自动缩进
set smartindent

" 总是显示状态栏
set laststatus=2
" 高亮显示当前行/列
set cursorline
"set cursorcolumn
" 高亮显示搜索结果
set hlsearch

" 开启语法高亮功能
syntax enable
" 允许用指定语法高亮配色方案替换默认方案
syntax on

" 配色方案
"set background=dark
"colorscheme solarized

" 开启实时搜索功能
set incsearch
" 搜索时大小写不敏感
set ignorecase
" 关闭兼容模式
set nocompatible
" vim 自身命令行模式智能补全
set wildmenu

" 基于缩进或语法进行代码折叠
"set foldmethod=indent
set foldmethod=syntax
" 启动 vim 时关闭折叠代码
set nofoldenable

"输入左大括号时自动输入右大括号
"inoremap { {<RETURN>}<ESC><UP>o

"使用taglist窗口
let Tlist_Show_One_File=1
let Tlist_Exit_OnlyWindow=1

"类成员自动补全
"filetype plugin indent on
"set completeopt=longest,menu

" 定义快捷键的前缀，即<Leader>
let mapleader=";"

" 设置插件 indexer 调用 ctags 的参数
" 默认 --c++-kinds=+p+l，重新设置为 --c++-kinds=+p+l+x+c+d+e+f+g+m+n+s+t+u+v
" 默认 --fields=+iaS 不满足 YCM 要求，需改为 --fields=+iaSl
"let g:indexer_ctagsCommandLineOptions="--c++-kinds=+p+l+x+c+d+e+f+g+m+n+s+t+u+v --fields=+iaSl --extra=+q"

" 设置 targbar 子窗口的位置出现在主编辑区的左边 
let tagbar_left=1 
" 设置显示／隐藏标签列表子窗口的快捷键。速记：identifier list by tag
nnoremap <Leader>ilt :TagbarToggle<CR> 
" 设置标签子窗口的宽度 
let tagbar_width=32 
" tagbar 子窗口中不显示冗余帮助信息 
let g:tagbar_compact=1
" 设置 ctags 对哪些代码标识符生成标签
let g:tagbar_type_cpp = {
    \ 'kinds' : [
         \ 'c:classes:0:1',
         \ 'd:macros:0:1',
         \ 'e:enumerators:0:0', 
         \ 'f:functions:0:1',
         \ 'g:enumeration:0:1',
         \ 'l:local:0:1',
         \ 'm:members:0:1',
         \ 'n:namespaces:0:1',
         \ 'p:functions_prototypes:0:1',
         \ 's:structs:0:1',
         \ 't:typedefs:0:1',
         \ 'u:unions:0:1',
         \ 'v:global:0:1',
         \ 'x:external:0:1'
     \ ],
     \ 'sro'        : '::',
     \ 'kind2scope' : {
         \ 'g' : 'enum',
         \ 'n' : 'namespace',
         \ 'c' : 'class',
         \ 's' : 'struct',
         \ 'u' : 'union'
     \ },
     \ 'scope2kind' : {
         \ 'enum'      : 'g',
         \ 'namespace' : 'n',
         \ 'class'     : 'c',
         \ 'struct'    : 's',
         \ 'union'     : 'u'
     \ }
\ }

" Vim indent file
" Language: C++
" Maintainer: Konstantin Lepa <konstantin.lepa@gmail.com>
" Last Change:  2010 May 20
" License: MIT
" Version: 1.1.0
"
" Changes {{{
" 1.1.0 2011-01-17
"   Refactored source code.
"   Some fixes.
"
" 1.0.1 2010-05-20
"   Added some changes. Thanks to Eric Rannaud <eric.rannaud@gmail.com>
"
"}}}
if exists("b:did_indent")
	finish
endif
let b:did_indent = 1


function! GoogleCppIndent()
	let l:cline_num = line('.')
	let l:orig_indent = cindent(l:cline_num)
	if l:orig_indent == 0 | return 0 | endif
	let l:pline_num = prevnonblank(l:cline_num - 1)
	let l:pline = getline(l:pline_num)
	if l:pline =~# '^\s*template' | return l:pline_indent | endif
	" TODO: I don't know to correct it:
	" namespace test {
	" void
	" ....<-- invalid cindent pos
	"
	" void test() {
	" }
	"
	" void
	" <-- cindent pos
	if l:orig_indent != &shiftwidth | return l:orig_indent | endif
	let l:in_comment = 0
	let l:pline_num = prevnonblank(l:cline_num - 1)
	while l:pline_num > -1
		let l:pline = getline(l:pline_num)
		let l:pline_indent = indent(l:pline_num)
		if l:in_comment == 0 && l:pline =~ '^.\{-}\(/\*.\{-}\)\@<!\*/'
			let l:in_comment = 1
		elseif l:in_comment == 1
			if l:pline =~ '/\*\(.\{-}\*/\)\@!'
				let l:in_comment = 0
			endif
		elseif l:pline_indent == 0
			if l:pline !~# '\(#define\)\|\(^\s*//\)\|\(^\s*{\)'
				if l:pline =~# '^\s*namespace.*'
					return 0
				else
					return l:orig_indent
				endif
			elseif l:pline =~# '\\$'
				return l:orig_indent
			endif
		else
			return l:orig_indent
		endif
		let l:pline_num = prevnonblank(l:pline_num - 1)
	endwhile
	return l:orig_indent
endfunction
set shiftwidth=2
set tabstop=2
set softtabstop=2
set expandtab
set textwidth=80
set wrap
set cindent
set cinoptions=h1,l1,g1,t0,i4,+4,(0,w1,W4
set indentexpr=GoogleCppIndent()
let b:undo_indent = "setl sw< ts< sts< et< tw< wrap< cin< cino< inde<"
augroup filetype
    autocmd! BufRead,BufNewFile BUILD set filetype=blade
augroup end

set tags=/opt/project/xuziqi03/giantdsp/adserver/Projects/tags
" 换行不自动注释
set formatoptions=ql
"set paste   " 注意:该功能会使得自动缩进失效

" vundle 环境设置
filetype on 
set rtp+=~/.vim/bundle/Vundle.vim
" vundle 管理的插件列表必须位于 vundle#begin() 和 vundle#end() 之间
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'altercation/vim-colors-solarized'
Plugin 'tomasr/molokai'
Plugin 'vim-scripts/phd'
Plugin 'Lokaltog/vim-powerline'
Plugin 'octol/vim-cpp-enhanced-highlight'
Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'derekwyatt/vim-fswitch'
Plugin 'kshenoy/vim-signature'
Plugin 'vim-scripts/BOOKMARKS--Mark-and-Highlight-Full-Lines'
Plugin 'majutsushi/tagbar'
Plugin 'vim-scripts/indexer.tar.gz'
Plugin 'vim-scripts/DfrankUtil'
Plugin 'vim-scripts/vimprj'
Plugin 'dyng/ctrlsf.vim'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'scrooloose/nerdcommenter'
Plugin 'vim-scripts/DrawIt'
"Plugin 'SirVer/ultisnips'
"Plugin 'Valloric/YouCompleteMe'
Plugin 'derekwyatt/vim-protodef'
Plugin 'scrooloose/nerdtree'
Plugin 'fholgado/minibufexpl.vim'
Plugin 'gcmt/wildfire.vim'
Plugin 'sjl/gundo.vim'
Plugin 'Lokaltog/vim-easymotion'
Plugin 'suan/vim-instant-markdown'
Plugin 'lilydjwg/fcitx.vim'
" 插件列表结束
call vundle#end()
filetype plugin indent on
